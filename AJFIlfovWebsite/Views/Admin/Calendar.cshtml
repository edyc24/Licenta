@model List<AJFIlfov.BusinessLogic.Implementation.Account.Models.AppointmentModel>

<h2 class="futuristic-title">Appointment Calendar</h2>
<div id="calendar-container">
    <div id="calendar-header">
        <button id="prev-month" class="calendar-nav">&lt;</button>
        <h1 id="current-month"></h1>
        <button id="next-month" class="calendar-nav">&gt;</button>
    </div>
    <div id="calendar"></div>
</div>

<!-- Modal for displaying appointments -->
<div id="appointment-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Appointments for <span id="modal-date"></span></h2>
        <div id="modal-appointments"></div>
    </div>
</div>

<style>
    #calendar-container {
        max-width: 900px;
        margin: 0 auto;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 20px;
        color: #ffffff;
    }

    #calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background-color: #333;
        color: #fff;
    }

    .calendar-nav {
        background-color: #00e0ff;
        border: none;
        color: #ffffff;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
    }

        .calendar-nav:hover {
            background-color: #ff4081;
        }

    #calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
        padding: 10px;
    }

    .calendar-day {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        cursor: pointer;
    }

    .calendar-day-header {
        font-weight: bold;
        color: #00e0ff;
    }

    .calendar-day-appointment {
        background-color: #00e0ff;
        color: #ffffff;
        border-radius: 5px;
        padding: 5px;
        margin-top: 5px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #333;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        color: #fff;
        border-radius: 10px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #fff;
            text-decoration: none;
            cursor: pointer;
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const appointments = @Html.Raw(Json.Serialize(Model));
        console.log('Appointments:', appointments); // Debugging step
        const calendarEl = document.getElementById('calendar');
        const currentMonthEl = document.getElementById('current-month');
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const modal = document.getElementById('appointment-modal');
        const modalDateEl = document.getElementById('modal-date');
        const modalAppointmentsEl = document.getElementById('modal-appointments');
        const closeModalBtn = document.getElementsByClassName('close')[0];

        let currentDate = new Date();

        function renderCalendar(date) {
            calendarEl.innerHTML = '';
            const year = date.getFullYear();
            const month = date.getMonth();
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            currentMonthEl.textContent = date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });

            const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            daysOfWeek.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.classList.add('calendar-day', 'calendar-day-header');
                dayHeader.textContent = day;
                calendarEl.appendChild(dayHeader);
            });

            for (let i = 0; i < firstDay; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.classList.add('calendar-day');
                calendarEl.appendChild(emptyDay);
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dayEl = document.createElement('div');
                dayEl.classList.add('calendar-day');
                dayEl.textContent = day;

                const appointmentDate = new Date(year, month, day);
                const dayAppointments = appointments.filter(app => new Date(app.Date).toDateString() === appointmentDate.toDateString());
                console.log(`Appointments for ${appointmentDate.toDateString()}:`, dayAppointments); // Debugging step

                dayAppointments.forEach(app => {
                    const appEl = document.createElement('div');
                    appEl.classList.add('calendar-day-appointment');
                    appEl.textContent = app.Title;
                    dayEl.appendChild(appEl);
                });

                dayEl.addEventListener('click', () => {
                    modalDateEl.textContent = appointmentDate.toDateString();
                    modalAppointmentsEl.innerHTML = '';
                    dayAppointments.forEach(app => {
                        const appDetailEl = document.createElement('div');
                        appDetailEl.textContent = `${app.Title} - ${app.Description}`;
                        modalAppointmentsEl.appendChild(appDetailEl);
                    });
                    modal.style.display = 'block';
                });

                calendarEl.appendChild(dayEl);
            }
        }

        prevMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar(currentDate);
        });

        nextMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar(currentDate);
        });

        closeModalBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });

        renderCalendar(currentDate);
    });
</script>
