@model List<AJFIlfov.BusinessLogic.Implementation.Account.Models.AppointmentModel>

<style>
    body {
        background-image: none;
        background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    #calendar-container {
        margin: 0 auto;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-huge);
        padding: 1.1rem;
        color: #ffffff;
    }

    #calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.6rem;
        color: #fff;
    }

    .calendar-nav {
        background-color: #00e0ff;
        border: none;
        color: #ffffff;
        padding: 0.6rem;
        border-radius: var(--radius-small);
        cursor: pointer;
    }

        .calendar-nav:hover {
            background-color: #ff4081;
        }

    #calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.6rem;
        padding: 0.6rem;
    }

    .calendar-day {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-small);
        padding: 0.6rem;
        text-align: center;
        cursor: pointer;
        position: relative;
        min-height: 3.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .calendar-day-header {
        font-weight: bold;
        color: #00e0ff;
        min-height: auto;
    }

    .appointment-indicator {
        width: 8px;
        height: 8px;
        background-color: #00e0ff;
        border-radius: 50%;
        position: absolute;
        bottom: 8px;
        left: 50%;
        transform: translateX(-50%);
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal.show {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-content {
        background-color: #333333;
        width: 80%;
        max-width: 600px;
        max-height: 90vh;
        color: #ffffff;
        border-radius: var(--radius-huge);
        position: relative;
        display: flex;
        flex-direction: column;
        margin: 0 auto;
        transform: translateY(0);
    }

    .modal-header {
        padding: 1.1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        position: relative;
    }

    .modal-header h2 {
        margin: 0;
        padding-right: 2rem;
    }

    .close {
        color: #aaaaaa;
        font-size: 1.5rem;
        font-weight: bold;
        position: absolute;
        right: 1.1rem;
        top: 1.1rem;
        line-height: 1;
    }

    .close:hover,
    .close:focus {
        color: #ffffff;
        text-decoration: none;
        cursor: pointer;
    }

    #modal-appointments {
        padding: 1.1rem;
        overflow-y: auto;
        max-height: calc(90vh - 5rem);
    }

    .appointment-details {
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-small);
    }

    .appointment-details:last-child {
        margin-bottom: 0;
    }

    .appointment-details-row {
        margin: 0.5rem 0;
    }

    .appointment-details-label {
        color: #00e0ff;
        margin-right: 0.5rem;
    }

    footer {
        margin-top: auto;
    }

    @@media (max-width: 768px) {
        #calendar-container {
            padding: 0.8rem;
        }

        #calendar {
            gap: 0.4rem;
            padding: 0.4rem;
        }

        .calendar-day {
            padding: 0.4rem;
            min-height: 2.8rem;
            font-size: 0.9rem;
        }

        .appointment-indicator {
            width: 6px;
            height: 6px;
            bottom: 4px;
        }

        .calendar-nav {
            padding: 0.4rem;
        }
    }

    @@media (max-width: 480px) {
        .calendar-day-header {
            font-size: 0.8rem;
        }

        [data-day="Sunday"] { content: "S"; }
        [data-day="Monday"] { content: "M"; }
        [data-day="Tuesday"] { content: "T"; }
        [data-day="Wednesday"] { content: "W"; }
        [data-day="Thursday"] { content: "T"; }
        [data-day="Friday"] { content: "F"; }
        [data-day="Saturday"] { content: "S"; }
    }
</style>

<h2 class="page-title-alt">Calendar</h2>

<div id="calendar-container">
    <div id="calendar-header">
        <button id="prev-month" class="calendar-nav">&lt;</button>
        <h1 id="current-month"></h1>
        <button id="next-month" class="calendar-nav">&gt;</button>
    </div>
    <div id="calendar"></div>
</div>

<div id="appointment-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Programări pentru <span id="modal-date"></span></h2>
            <span class="close">&times;</span>
        </div>
        <div id="modal-appointments"></div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const appointments = @Html.Raw(Json.Serialize(Model));
        console.log('Appointments:', appointments);
        const calendarEl = document.getElementById('calendar');
        const currentMonthEl = document.getElementById('current-month');
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const modal = document.getElementById('appointment-modal');
        const modalDateEl = document.getElementById('modal-date');
        const modalAppointmentsEl = document.getElementById('modal-appointments');
        const closeModalBtn = document.getElementsByClassName('close')[0];

        let currentDate = new Date();

        function formatDate(date) {
            return date.toLocaleDateString('ro-RO', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
        }

        function renderCalendar(date) {
            calendarEl.innerHTML = '';
            const year = date.getFullYear();
            const month = date.getMonth();
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            currentMonthEl.textContent = date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });

            const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            const shortDaysOfWeek = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
            
            daysOfWeek.forEach((day, index) => {
                const dayHeader = document.createElement('div');
                dayHeader.classList.add('calendar-day', 'calendar-day-header');
                dayHeader.setAttribute('data-day', day);
                dayHeader.textContent = window.innerWidth <= 480 ? shortDaysOfWeek[index] : day;
                calendarEl.appendChild(dayHeader);
            });

            for (let i = 0; i < firstDay; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.classList.add('calendar-day');
                calendarEl.appendChild(emptyDay);
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dayEl = document.createElement('div');
                dayEl.classList.add('calendar-day');
                dayEl.textContent = day;

                const appointmentDate = new Date(year, month, day);
                const dayAppointments = appointments.filter(appointment => {
                    const appointmentDateTime = new Date(appointment.date);
                    return appointmentDateTime.toDateString() === appointmentDate.toDateString();
                });

                if (dayAppointments.length > 0) {
                    const indicator = document.createElement('div');
                    indicator.classList.add('appointment-indicator');
                    dayEl.appendChild(indicator);
                }

                dayEl.addEventListener('click', () => {
                    modalDateEl.textContent = formatDate(appointmentDate);
                    modalAppointmentsEl.innerHTML = '';
                    
                    if (dayAppointments.length === 0) {
                        return;
                    }

                    dayAppointments.forEach(appointment => {
                        const appDetailEl = document.createElement('div');
                        appDetailEl.classList.add('appointment-details');
                        
                        const userName = appointment.userName || 'Nespecificat';
                        const time = appointment.time || 'Nespecificat';
                        const title = appointment.title || 'Nespecificat';
                        const description = appointment.description || 'Nespecificat';
                        
                        appDetailEl.innerHTML = `
                            <div class="appointment-details-row">
                                <span class="appointment-details-label">Utilizator:</span>
                                <span>${userName}</span>
                            </div>
                            <div class="appointment-details-row">
                                <span class="appointment-details-label">Ora:</span>
                                <span>${time}</span>
                            </div>
                            <div class="appointment-details-row">
                                <span class="appointment-details-label">Titlu:</span>
                                <span>${title}</span>
                            </div>
                            <div class="appointment-details-row">
                                <span class="appointment-details-label">Descriere:</span>
                                <span>${description}</span>
                            </div>
                        `;
                        modalAppointmentsEl.appendChild(appDetailEl);
                    });
                    modal.classList.add('show');
                });

                calendarEl.appendChild(dayEl);
            }
        }

        prevMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar(currentDate);
        });

        nextMonthBtn.addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar(currentDate);
        });

        closeModalBtn.addEventListener('click', () => {
            modal.classList.remove('show');
        });

        window.addEventListener('click', (event) => {
            if (event.target === modal) {
                modal.classList.remove('show');
            }
        });

        renderCalendar(currentDate);
        
        window.addEventListener('resize', () => {
            renderCalendar(currentDate);
        });
    });
</script>
