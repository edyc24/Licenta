@{
    ViewData["Title"] = "Futuristic Sports";
}
@{
    Layout = null;
}
@using AJFIlfov.Common.DTOs
@using Microsoft.AspNetCore.Authorization
@inject CurrentUserDto CurrentUser
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- google fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Funnel+Display:wght@300..800&display=swap" rel="stylesheet">
    <!-- css styles -->
    <link rel="stylesheet" href="https://ajfilfovwebsite20241218232333.azurewebsites.net/css/Turnee/Elimination2.css">
    <link rel="stylesheet" href="https://ajfilfovwebsite20241218232333.azurewebsites.net/css/Common/Common2.css">
    <style>
        html,
        body,
        .body-filter {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .header-title h2 {
            color: var(--color-on-surface);
        }

        .header-title h3 {
            color: var(--color-on-surface);
        }

        .classification-matches {
            margin: 60px auto 30px;
            padding: 0 20px;
            max-width: 1400px;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .classification-matches h2 {
                font-size: 2rem;
                margin-bottom: 30px;
                text-align: center;
                color: var(--color-on-surface);
                width: 100%;
            }

        .tournament-container {
            margin-bottom: 30px;
            width: 100%;
            display: flex;
            justify-content: center;
        }

        .classification-brackets {
            display: flex;
            justify-content: center;
            flex-direction: row;
            gap: 30px;
            width: auto;
        }

        .classification-bracket {
            display: flex;
            flex-direction: row;
            gap: 30px;
            margin: 0;
            padding: 0;
            list-style: none;
        }

            .classification-bracket .team-item-container {
                position: relative;
                display: flex;
                align-items: center;
                margin: 0;
            }

                .classification-bracket .team-item-container:after,
                .classification-bracket .team-item-container:before {
                    display: none;
                }

            .classification-bracket .team-item-content {
                min-width: 250px;
            }

        .bracket-third-place {
            position: relative;
            display: flex;
            justify-content: center;
            width: auto;
        }

        .third-place-match {
            position: relative;
        }

            .third-place-match:before,
            .third-place-match:after {
                display: none;
            }

            .third-place-match .team-item-content {
                position: relative;
                border: 2px dashed #555555;
                min-width: 200px;
            }

                .third-place-match .team-item-content:before {
                    content: "Finala mică";
                    position: absolute;
                    top: -3rem;
                    left: 0;
                    width: 100%;
                    text-align: center;
                    font-size: 0.9rem;
                    color: var(--color-on-surface);
                    font-weight: bold;
                }

        .bracket:nth-last-child(2) .team-item-container:after,
        .bracket:last-child .team-item-container:after {
            display: none;
        }

        @@media (max-width: 1280px) {
            .classification-brackets {
                flex-direction: column;
                align-items: center;
            }

            .classification-bracket {
                flex-direction: column;
            }
        }

        .website-button {
            background-color: var(--color-secondary);
            color: var(--color-on-secondary);
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-size: 0.75rem;
            transition: background-color 0.3s ease;
            text-decoration: none;
            display: inline-block;
            margin-left: auto;
            padding: 0.8rem 0.5rem;
            white-space: nowrap;
            line-height: 1.2;
        }

            .website-button:hover {
                background-color: #00a89b;
            }

        @@media (min-width: 768px) {
            .website-button {
                padding: 0.5rem 1.5rem;
                font-size: 1rem;
            }
        }

        /* Add styles for score editing */
        .match-score {
            display: inline-block;
            background-color: #ff3b3b;
            color: white;
            padding: 4px 12px;
            border-radius: 4px;
            min-width: 60px;
            text-align: center;
        }

        .score-edit-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
            width: fit-content;
        }

        .edit-score-btn {
            background: var(--color-secondary);
            color: var(--color-on-secondary);
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            padding: 4px 12px;
            width: 100%;
            min-width: 60px;
            transition: background-color 0.3s ease;
        }

        .edit-score-btn:hover {
            background-color: #00a89b;
        }

        .score-edit-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: var(--color-surface);
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
        }

        .score-inputs {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin: 20px 0;
        }

        .team-score {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .team-score input {
            padding: 8px;
            border: 1px solid var(--color-on-surface);
            border-radius: 4px;
            background-color: var(--color-surface);
            color: var(--color-on-surface);
        }

        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .modal-buttons button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .modal-buttons button:first-child {
            background-color: var(--color-secondary);
            color: var(--color-on-secondary);
        }

        .modal-buttons button:last-child {
            background-color: var(--color-error);
            color: var(--color-on-error);
        }
    </style>
</head>
<body>
    <!-- filter over hexagon background to make it blurred and cool; it needs to wrap around the whole content so that its height matches it -->
    <div class="body-filter">
        <!-- header section -->
        <header>
            <div class="header-content">
                <div class="header-title">
                    <img src="https://ajfilfovwebsite20241218232333.azurewebsites.net/images/logo1.png" alt="Logo AJF Ilfov">
                    <h2>Asociația Județeană de Fotbal Ilfov</h2>
                    <h3>AJF Ilfov</h3>
                </div>

                <!-- website button -->
                <a href="https://ajfilfovwebsite20241218232333.azurewebsites.net" class="website-button">Către site-ul principal</a>
            </div>
        </header>

        <!-- ------------------------------------------------- -->
        <!-- page title -->
        <h1 class="page-title">Etapa de eliminare</h1>
        <!-- actual page content -->
        <div class="tournament-container" id="tournament-container">
            <div class="tournament-brackets" id="tournament-brackets"></div>
        </div>

        <!-- Classification matches section -->
        <div class="classification-matches">
            <h2>Meciuri de clasament (locurile 3-4)</h2>
            <div class="classification-brackets" id="classification-brackets"></div>
        </div>

        <!-- Add footer here -->
        <footer>
            <p>© 2024 Asociația Județeană de Fotbal Ilfov. Toate drepturile rezervate.</p>
            <div class="social-icons">
                <a class="instagram" href="#"></a>
                <a class="facebook" href="https://www.facebook.com/AJFIlfov1997/?locale=ro_RO"></a>
                <a class="twitter" href="#"></a>
            </div>
        </footer>
    </div>

    <script>
        const eliminationMatches = @Html.Raw(Json.Serialize(ViewBag.EliminationMatches));
        const classificationMatches = @Html.Raw(Json.Serialize(ViewBag.ClassificationMatches));
        const isAdmin = @Html.Raw(Json.Serialize(CurrentUser.Role == "Administrator"));

        function generateEliminationStage(matches) {
            const brackets = document.getElementById('tournament-brackets');
            brackets.innerHTML = '';

            // Group matches by round
            const matchesByRound = {};
            matches.forEach(match => {
                if (!matchesByRound[match.runda]) {
                    matchesByRound[match.runda] = [];
                }
                matchesByRound[match.runda].push(match);
            });

            // Sort rounds in ascending order
            const sortedRounds = Object.keys(matchesByRound).sort((a, b) => a - b);

            // Create a bracket for each round
            sortedRounds.forEach(roundNumber => {
                const roundMatches = matchesByRound[roundNumber];
                const roundBracket = document.createElement('ul');
                roundBracket.className = `bracket bracket-${roundNumber}`;

                // Sort matches by index
                roundMatches.sort((a, b) => a.index - b.index);

                // Check if this is the last round and has a third-place match
                const isLastRound = parseInt(roundNumber) === Math.max(...sortedRounds);
                const hasThirdPlaceMatch = isLastRound && roundMatches.some(m => m.index === 2);

                roundMatches.forEach(match => {
                    // Skip the third-place match in the last round as it will be handled separately
                    if (isLastRound && match.index === 2) {
                        return;
                    }

                    const matchItemContainer = document.createElement('li');
                    matchItemContainer.className = 'team-item-container';

                    const matchItemContent = document.createElement('div');
                    matchItemContent.className = 'team-item-content';

                    const team1 = match.echipaGazdaNume;
                    const team2 = match.echipaOaspeteNume;
                    const score = match.scorGazda + '-' + match.scorOaspeti;
                    const date = new Date(match.data);
                    const time = `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
                    const stadium = match.stadionNume;

                    let scoreContent = `<span class="match-score">${score}</span>`;
                    if (isAdmin) {
                        scoreContent = `
                            <div class="score-edit-container">
                                <span class="match-score">${score}</span>
                                <button class="edit-score-btn" onclick="openScoreEditModal('${match.idTurneu}', '${team1}', '${team2}', ${match.scorGazda}, ${match.scorOaspeti}, ${match.runda}, ${match.index})">
                                    Editare
                                </button>
                            </div>
                        `;
                    }

                    matchItemContent.innerHTML = `
                        <strong class="stadium-name">${stadium}</strong>
                        <div class="match-info-row">
                            <time>${time}</time>
                            <div class="teams-column">
                                <span class="team-name">${team1}</span>
                                <span class="team-name">${team2}</span>
                            </div>
                            ${scoreContent}
                        </div>
                        <div class="match-metadata" style="display: none;">
                            <span class="round-number">${match.runda}</span>
                            <span class="match-index">${match.index}</span>
                        </div>
                    `;

                    matchItemContainer.appendChild(matchItemContent);
                    roundBracket.appendChild(matchItemContainer);
                });

                brackets.appendChild(roundBracket);

                // Add third-place match after the last round if it exists
                if (hasThirdPlaceMatch) {
                    const thirdPlaceMatch = roundMatches.find(m => m.index === 2);
                    const thirdPlaceRound = document.createElement('ul');
                    thirdPlaceRound.className = 'bracket bracket-third-place';

                    const matchItemContainer = document.createElement('li');
                    matchItemContainer.className = 'team-item-container third-place-match';

                    const matchItemContent = document.createElement('div');
                    matchItemContent.className = 'team-item-content';

                    const team1 = thirdPlaceMatch.echipaGazdaNume;
                    const team2 = thirdPlaceMatch.echipaOaspeteNume;
                    const score = thirdPlaceMatch.scorGazda + '-' + thirdPlaceMatch.scorOaspeti;
                    const date = new Date(thirdPlaceMatch.data);
                    const time = `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
                    const stadium = thirdPlaceMatch.stadionNume;

                    let scoreContent = `<span class="match-score">${score}</span>`;
                    if (isAdmin) {
                        scoreContent = `
                            <div class="score-edit-container">
                                <span class="match-score">${score}</span>
                                <button class="edit-score-btn" onclick="openScoreEditModal('${thirdPlaceMatch.idTurneu}', '${team1}', '${team2}', ${thirdPlaceMatch.scorGazda}, ${thirdPlaceMatch.scorOaspeti}, ${thirdPlaceMatch.runda}, ${thirdPlaceMatch.index})">
                                    Editare
                                </button>
                            </div>
                        `;
                    }

                    matchItemContent.innerHTML = `
                        <strong class="stadium-name">${stadium}</strong>
                        <div class="match-info-row">
                            <time>${time}</time>
                            <div class="teams-column">
                                <span class="team-name">${team1}</span>
                                <span class="team-name">${team2}</span>
                            </div>
                            ${scoreContent}
                        </div>
                        <div class="match-metadata" style="display: none;">
                            <span class="round-number">${thirdPlaceMatch.runda}</span>
                            <span class="match-index">${thirdPlaceMatch.index}</span>
                        </div>
                    `;

                    matchItemContainer.appendChild(matchItemContent);
                    thirdPlaceRound.appendChild(matchItemContainer);
                    brackets.appendChild(thirdPlaceRound);
                }
            });
        }

        function generateClassificationMatches(matches) {
            const brackets = document.getElementById('classification-brackets');
            brackets.innerHTML = '';

            const classificationRound = document.createElement('ul');
            classificationRound.className = 'bracket classification-bracket';

            matches.forEach((match, index) => {
                const matchItemContainer = document.createElement('li');
                matchItemContainer.className = 'team-item-container';

                const matchItemContent = document.createElement('div');
                matchItemContent.className = 'team-item-content';

                const team1 = match.echipaGazdaNume;
                const team2 = match.echipaOaspeteNume;
                const score = match.scorGazda + '-' + match.scorOaspeti;
                const date = new Date(match.data);
                const time = `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
                const stadium = match.stadionNume;

                let scoreContent = `<span class="match-score">${score}</span>`;
                if (isAdmin) {
                    scoreContent = `
                        <div class="score-edit-container">
                            <span class="match-score">${score}</span>
                            <button class="edit-score-btn" onclick="openScoreEditModal('${match.idTurneu}', '${team1}', '${team2}', ${match.scorGazda}, ${match.scorOaspeti})">
                                Editare
                            </button>
                        </div>
                    `;
                }

                matchItemContent.innerHTML = `
                    <strong class="stadium-name">${stadium}</strong>
                    <div class="match-info-row">
                        <time>${time}</time>
                        <div class="teams-column">
                            <span class="team-name">${team1}</span>
                            <span class="team-name">${team2}</span>
                        </div>
                        ${scoreContent}
                    </div>
                `;

                matchItemContainer.appendChild(matchItemContent);
                classificationRound.appendChild(matchItemContainer);
            });

            brackets.appendChild(classificationRound);
        }

        // Score edit modal functionality
        function openScoreEditModal(matchId, team1, team2, score1, score2, roundNumber, matchIndex) {
            const modal = document.createElement('div');
            modal.className = 'score-edit-modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <h3>Editare scor</h3>
                    <div class="score-inputs">
                        <div class="team-score">
                            <label>${team1}</label>
                            <input type="number" id="homeScore" value="${score1}" min="0">
                        </div>
                        <div class="team-score">
                            <label>${team2}</label>
                            <input type="number" id="awayScore" value="${score2}" min="0">
                        </div>
                    </div>
                    <div class="modal-buttons">
                        <button onclick="saveScore('${matchId}', ${roundNumber}, ${matchIndex})">Salvează</button>
                        <button onclick="closeModal()">Anulează</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        function closeModal() {
            const modal = document.querySelector('.score-edit-modal');
            if (modal) {
                modal.remove();
            }
        }

        function saveScore(matchId, roundNumber, matchIndex) {
            const homeScore = parseInt(document.getElementById('homeScore').value);
            const awayScore = parseInt(document.getElementById('awayScore').value);

            fetch('/Turnee/UpdateScore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    matchId: matchId,
                    homeScore: homeScore,
                    awayScore: awayScore
                })
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Eroare la salvarea scorului');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Eroare la salvarea scorului');
            });
        }

        generateEliminationStage(eliminationMatches);
        generateClassificationMatches(classificationMatches);
    </script>

</body>
</html>
